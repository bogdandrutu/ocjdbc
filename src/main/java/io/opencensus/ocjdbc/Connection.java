// Copyright 2018, OpenCensus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package io.opencensus.ocjdbc;

import io.opencensus.ocjdbc.Observability;

import java.sql.SQLException;
import java.util.concurrent.Executor;

/*
 * Connection is a class that wraps a java.sql.Connection and instruments
 * each of its methods with tracing and metrixs using OpenCensus
 */
public class Connection {
    private java.sql.Connection conn;

    public Connection(java.sql.Connection conn) {
        this.conn = conn;
    }

    public void abort(Executor executor) throws SQLException {
        Observability.RoundtripTrackingSpan span = Observability.createRoundtripTrackingSpan("java.sql.abort", "abort");

        try {
            this.conn.abort(executor);
        } catch (Exception e) {
            span.recordStatWithTags(Observability.mErrors, 1, Observability.tagKeyPair(Observability.keyReason, e.toString()));
            throw e;
        } finally {
            span.close();
        }
    }

    public void clearWarnings() throws SQLException {
        Observability.RoundtripTrackingSpan span = Observability.createRoundtripTrackingSpan("java.sql.clearWarnings", "clearWarnings");

        try {
            this.conn.clearWarnings();
        } catch (Exception e) {
            span.recordStatWithTags(Observability.mErrors, 1, Observability.tagKeyPair(Observability.keyReason, e.toString()));
            throw e;
        } finally {
            span.close();
        }
    }

    public void close() throws SQLException {
        Observability.RoundtripTrackingSpan span = Observability.createRoundtripTrackingSpan("java.sql.close", "close");

        try {
            this.conn.close();
        } catch (Exception e) {
            span.recordStatWithTags(Observability.mErrors, 1, Observability.tagKeyPair(Observability.keyReason, e.toString()));
            throw e;
        } finally {
            span.close();
        }
    }

    public java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        Observability.RoundtripTrackingSpan span = Observability.createRoundtripTrackingSpan("java.sql.createStatement", "createStatement");

        try {
            java.sql.Statement stmt = this.conn.createStatement(resultSetType, resultSetConcurrency);
            return new Statement(stmt);
        } catch (Exception e) {
            span.recordStatWithTags(Observability.mErrors, 1, Observability.tagKeyPair(Observability.keyReason, e.toString()));
            throw e;
        } finally {
            span.close();
        }
    }

    public java.sql.PreparedStatement prepareStatement(String SQL) throws SQLException {
        Observability.RoundtripTrackingSpan span = Observability.createRoundtripTrackingSpan("java.sql.prepareStatement", "prepareStatement");

        try {
            java.sql.PreparedStatement pstmt = this.conn.prepareStatement(SQL);
            return new PreparedStatement(pstmt);
        } catch (Exception e) {
            span.recordStatWithTags(Observability.mErrors, 1, Observability.tagKeyPair(Observability.keyReason, e.toString()));
            throw e;
        } finally {
            span.close();
        }
    }

    public java.sql.PreparedStatement prepareStatement(String SQL, int autoGeneratedKeys) throws SQLException {
        Observability.RoundtripTrackingSpan span = Observability.createRoundtripTrackingSpan("java.sql.prepareStatement", "prepareStatement");

        try {
            java.sql.PreparedStatement pstmt = this.conn.prepareStatement(SQL, autoGeneratedKeys);
            return new PreparedStatement(pstmt);
        } catch (Exception e) {
            span.recordStatWithTags(Observability.mErrors, 1, Observability.tagKeyPair(Observability.keyReason, e.toString()));
            throw e;
        } finally {
            span.close();
        }
    }

    public java.sql.PreparedStatement prepareStatement(String SQL, int[] columnNames) throws SQLException {
        Observability.RoundtripTrackingSpan span = Observability.createRoundtripTrackingSpan("java.sql.prepareStatement", "prepareStatement");

        try {
            java.sql.PreparedStatement pstmt = this.conn.prepareStatement(SQL, columnNames);
            return new PreparedStatement(pstmt);
        } catch (Exception e) {
            span.recordStatWithTags(Observability.mErrors, 1, Observability.tagKeyPair(Observability.keyReason, e.toString()));
            throw e;
        } finally {
            span.close();
        }
    }
}
